/*
class bufferi {

field array _arr;
field int size;
field int pos;
field int take;
field int taint;
constructor buffer new(in int initial_size, in int take_)
{
	var int i;
	take := take_;
	_arr := array.new(initial_size);
	size := initial_size;
	taint := take_; // FIXME must find if child is twice in that array
	pos := 0;
	i := 0;
	while (i < initial_size) {
		_arr[i] := 0;
		i := i + 1;
	}
	return this;
}
*/
/*
virtual void dispose()
{
	var int i;
	if (_arr != null && take != 0) {
		i := 0;
		while (i < pos) {
			delete_at(i);
			i := i + 1;
		}
	}
	std.delete(_arr);
	_arr := null;
	std.free(this);
	return;
}

method int length()
{
	return pos;
}

method int empty()
{
	if (pos > 0) {
		return 0;
	}
	return 1;
}

method void delete_at(in int idx)
{
	var array elem;
	var int i;
	var int k;
	if (taint != 0) {
		i := 0;
		elem := _arr[idx];
		if (elem == null) {
			return;
		}
		while (i < pos) {
			if (_arr[i] == elem && i != idx) {
				_arr[idx] := null;
				return;
			}
			i := i + 1;
		}

	}
	std.delete(_arr[idx]);
	_arr[idx] := null;
	return;
}

method void set_at(in int idx, in array elem)
{
	var array a;
	var int i;

	if (idx + 1 >= size) {
		a := array.new(idx + 8);
		i := 0;
		while (i < pos) {
			a[i] := _arr[i];
			i := i + 1;
		}
		size := idx + 8;
		while (i < size) {
			a[i] := 0;
			i := i + 1;
		}

		_arr.dispose();
		_arr := a;
	} else if (take != 0 && idx < pos) {
		delete_at(idx);
	}

	if (take) {
		std.move(elem);
	}
	while (pos < idx) {
		_arr[pos] := 0;
		pos := pos + 1;
	}
	_arr[idx] := elem;
	if ((idx + 1) > pos) {
		pos := idx + 1;
	}
	_arr[pos] := 0;

	return;
}

method void get_at(in int idx) 
{
	return _arr[idx];
}

method void push(in array elem)
{
	var int p;
	p := pos + 1;
	set_at(pos, elem);
	pos := p;
	return 0;
}

method void append(in buffer buf)
{
	var int l;
	var int j;
	j := buf.length();
	l := length() + j;
	pos := l;
	while (j > 0) {
		l := l - 1;
		j := j - 1;
		set_at(l, buf.get_at(j));
	}
	return;
}

method void set_last(in array elem)
{
	if (pos < 1) {
		return;
	}
	_arr[pos - 1] := elem;
	return;
}


method array get_last()
{
	if (pos < 1) {
		return null;
	}
	return _arr[pos - 1];
}

method array pop()
{
	var array elem;
	elem := null;
	if (pos > 0) {
		pos := pos - 1;
		elem := get_at(pos);
	}
	return elem;
}

method void unshift(in array elem)
{
	var int i;
	var int p;
	p := pos + 1;
	set_at(pos, 0); // create space
	i := pos;
	while (i > 1) {
		i := i - 1;
		_arr[i] := _arr[i - 1];
	}
	_arr[0] := elem;
	pos := p;
	return 0;
}

method array shift()
{
	var array elem;
	var int i;
	var int p;
	if (pos < 1) {
		return null;
	}
	p := pos - 1;
	elem := get_at(0);
	i := 0;
	while (i < pos) {
		_arr[i] := _arr[i + 1];
		i := i + 1;
	}
	pos := p;
	
	return elem;
}
*/
} // class

