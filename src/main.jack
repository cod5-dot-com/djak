/*
 *          MMXXIII December 11 PUBLIC DOMAIN by O'ksi'D
 *
 *        The authors disclaim copyright to this software.
 *
 * Anyone is free to copy, merge, modify, publish, use, compile, sell,
 * or distribute this software, either in source code form or as a
 * compiled binary, for any purpose, commercial or non-commercial, and
 * by any means.
 *
 * Anyone is free to create, communicate to the public, use, sell,
 * repair, modify, test, distribute or configure hardware in finished
 * or intermediate form, whether by manufacture, assembly, compiling,
 * processing, loading or applying this software or another hardware or
 * otherwise.
 *
 * THE SOFTWARE AND/OR HARDWARE ARE PROVIDED "AS IS", WITHOUT WARRANTY
 * OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT OF ANY PATENT, COPYRIGHT, TRADE SECRET OR OTHER
 * PROPRIETARY RIGHT.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE AND/OR HARDWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
 * AND/OR HARDWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 */

class main
{
field string str;
field string tmp;
field array args;
field file fd;
field int n;
field int i;
field int end;
field Alexer lex;
field Aparser par;
field Aemmiter emi;
field string head;
field string body;
field string to;
field int l;

field string pf_tmp;
field string pf_out;
field file pf_fd;
field int pf_off;
field string pf_f;
field object pf_cb;
field object pf_cb_this;


const int Cblock := 4096;
const string Chello := " --- Just A C Kit 3.0.3 ---";
const int Cc := 0;
const int Cjs := 1;
const int Cphp := 2;

method void copy_block()
{
	pf_fd.read(pf_f, pf_off, main.$Cblock, {
		var bytes d;
		var int n;
		var int i;
		var int l;
		if (status == 200 && type == 1)
		{
			d := data;
			n := d.get_size();
			i := 0;
			l := pf_out.length();
			pf_out.set_size(l  + n + 1);
			while (i < n) {
				pf_out.set_at(i+l, d.get_at(i));
				i := i + 1;
			}
			pf_out.set_at(i+l, 0);
			pf_off := pf_off + main.$Cblock;
			copy_block();
		} else
		{
			std.delete(pf_fd);
			worker.new(pf_cb_this, pf_cb, 200, 0, 0);
		}
		return 0;
	});
	return;
}

method void copyto(in string f, in string output, async std cb)
{
	console.log_str("Including : ");
	console.log(f);

	pf_out := output;
	pf_f := f;
	pf_off := 0;
	pf_fd := file.new("");
	pf_cb := cb;
	pf_cb_this := cb.this();

	copy_block();
	return;
}

method void process_file_end(in int stat)
{
	std.delete(pf_fd);
	lex.finish();
	std.delete(pf_tmp);
	worker.new(pf_cb_this, pf_cb, stat, 0, 0);
	return;
}

method void process_file_block(in int n, in bytes d)
{
	var int i;
	i := 0;
	while (i < n) {
		pf_tmp.add_char(d.get_at(i));
		i := i + 1;
	}
	pf_off := pf_off + main.$Cblock;
	lex.add(pf_tmp);
	pf_tmp.set("");
	pf_fd.read(pf_f, pf_off, main.$Cblock, {
		var bytes d;
		if (status == 200 && type == 1)
		{
			d := data;
			process_file_block(d.get_size(), d);
		} else
		{
			process_file_end(200);
		}
		return 0;
	});
	return;
}

method void process_file(in string f, async std cb)
{
	pf_f := f;
	pf_off := 0;
	pf_tmp := string.new(10000);
	pf_fd := file.new("");
	pf_cb := cb;
	pf_cb_this := cb.this();

	console.log_str("Compiling : ");
	console.log(pf_f);
	lex.begin(pf_f);
	pf_fd.read(pf_f, 0, main.$Cblock, {
		var bytes d;
		if (status == 200 && type == 1)
		{
			d := data;
			process_file_block(d.get_size(), d);
		} else
		{
			process_file_end(400);
		}
		return 0;
	});
	return;
}

constructor main new()
{
	return this;
}

virtual void dispose()
{
	std.delete(tmp);
	std.free(this);
	return;
}

function void main()
{
	var main m;
	m := main.new();
	m.run();
	std.loop();
	std.delete(m);
	return;
}

method void run()
{
	console.log(main.$Chello);

	args := std.get_args();
	n := std.get_argc();
	if (n < 3) {
		console.log("wrong number of command line arguments");
		std.exit(-1);
	}
	head := string.new(2048);
	body := string.new(2048);
	str := args[1];
	to := string.new(20);
	to.add(str);
	to.add(".jack.c");
	fd := file.new("");
	tmp := string.new(100);
	lex := Alexer.new();
	par := Aparser.new();
	emi := Aemmitc.new(0); // 2= Debug on

	i := 2;
	next_file();
	return;
}

method void next_file()
{
	if (i < n) {
		tmp.set(args[i]);
		i := i + 1;
		end := tmp.length();
		if (tmp.indexof(0, ".jack") == (end - 5)) {
			std.delete(lex);
			lex := Alexer.new();
			process_file(tmp, {
				par.parse(lex);
				emi.emmit(par);
				par.release();
				next_file();
				return 0;
			});
		} else if (tmp.indexof(0, ".h") == (end - 2)) {
			copyto(tmp, head, {next_file(); return 0;});
		} else if (tmp.indexof(0, ".c") == (end - 2)) {
			copyto(tmp, body, {next_file(); return 0;});
		} else {
			finish();
		}
	} else {
		finish();
	}
	return;
}

method void finish()
{
	i := 0;
	str := null;
	l := 0;
	emi.gen_virtuals();
	fd.unlink(to, {finish1(); return 0;});
	return;
}

method void finish1()
{
	i := i + l;
	l := 0;
	while (l <= 0) {
		if (str == null) {
			str := head;
		} else if (str == head) {
			str := emi.get_head();
		} else if (str == emi.get_head()) {
			str := emi.get_mid();
		} else if (str == emi.get_mid()) {
			str := body;
		} else if (str == body) {
			str := emi.get_data();
		} else {
			console.log_str("Output to : ");
			console.log(to);
			std.delete(to);
			std.delete(fd);
			std.delete(lex);
			std.delete(par);
			std.delete(emi);
			std.delete(head);
			std.delete(body);
			return;
		}
		l := str.length();
	}
	console.log_int(l);
	console.log(": bytes writing");
	fd.write(to, str, 0,  i, l, {
		if (status != 200)
		{
			console.log("Error writing file");
			std.exit(-1);
		}
		finish1();
		return 0;
	});
	return;
}

} // class

