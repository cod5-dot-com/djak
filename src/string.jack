/*
 *          MMXXIII December 11 PUBLIC DOMAIN by O'ksi'D
 *
 *        The authors disclaim copyright to this software.
 *
 * Anyone is free to copy, merge, modify, publish, use, compile, sell,
 * or distribute this software, either in source code form or as a
 * compiled binary, for any purpose, commercial or non-commercial, and
 * by any means.
 *
 * Anyone is free to create, communicate to the public, use, sell,
 * repair, modify, test, distribute or configure hardware in finished
 * or intermediate form, whether by manufacture, assembly, compiling,
 * processing, loading or applying this software or another hardware or
 * otherwise.
 *
 * THE SOFTWARE AND/OR HARDWARE ARE PROVIDED "AS IS", WITHOUT WARRANTY
 * OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT OF ANY PATENT, COPYRIGHT, TRADE SECRET OR OTHER
 * PROPRIETARY RIGHT.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE AND/OR HARDWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
 * AND/OR HARDWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 */

class string
{
field array _str;
field int size;

constructor string new(in int alloc)
{
	_str := null;
	std.stralloc(this, alloc + 1);
	size := alloc;
	return this;
}

virtual void dispose()
{
	std.string_release(this);
	return;
}

method array get_buf()
{
	return _str;
}

method void set_buf(in object b)
{
	_str := b;
	return;
}

method int get_size()
{
	return size;
}

method void set_size(in int ns)
{
	var string ops;
	var array b;

	if (size > ns) {
		return;
	}
	ops := string.new(ns+1);
	std.append(ops, 0,  this, 0, size);
	b := _str;
	_str := ops.get_buf();
	ops.set_buf(b);
	std.delete(ops);
	size := ns;
	return;
}

method int length()
{
	var int l;

	l := std.strlen(this);
	return l;
}

method void set_int(in int num)
{
	return std.str_set_int(this, size, num);
}

method void set(in string src)
{
	var int sl;
	sl := std.strlen(src);
	if (size < sl) {
		std.stralloc(this, sl+1);
		size := sl;
	}
	std.str_set_at(this, 0, '\0');
	std.append(this, 0, src, 0, sl);
	return;
}

method void add_char(in int num)
{
	var int sl, tl, ns, i;
	sl := 6;
	tl := std.strlen(this);

	ns := sl + tl + 1;
	i := 0;
	if (size <= ns) {
		ns := ns + 8;
		set_size(ns);
	}
	i := tl;
	std.str_set_at(this, i, num); // FIXME UTF-8
	i := i + 1;
	std.str_set_at(this, i, '\0');
	return;
}

method void add(in string src)
{
	add_at(std.strlen(this), src);
	return;
}

method void add_at(in int tl, in string src)
{
	var int sl, ns;
	sl := std.strlen(src);
	ns := sl + tl + 1;
	if (ns >= size) {
		set_size(ns * 2);
	}
	std.append(this, tl, src, 0,  ns);
	return sl + tl;
}


method int indexof(in int start_pos, in string needle)
{
	return std.strindex(this, start_pos, needle);
}

method void substr(in int start_pos, in int length_, out string result)
{
	var int len;

	len := std.strlen(this);
	if (start_pos < 0) {
		start_pos := start_pos + len;
	}
	if (start_pos < 0) {
		start_pos := 0;
	}
	if (length_ < 0) {
		length_ := len + length_ - start_pos;
	} else if (length_ == 0) {
		length_ := len;
	}

	if ((start_pos >= len) || (length_ < 1)) {
		result.set("");
		return;
	}
	result.set_size(length_ + 1);
	std.str_set_at(result, 0, '\0');
	std.append(result, 0, this, start_pos, length_);
	return;
}


/** the returned string is alloced and must be disposed */
method string to_string()
{
	var string str;
	str := string.new(length() + 1);
	str.set(this);
	return str;
}

method int to_int()
{
	return std.str_toint(this);
}

method int compare(in string other)
{
	return std.strcmp(this, other);
}

method int get_hash()
{
	return std.strhash(this);
}

method int get_at(in int at)
{
	var int l;
	l := size;
	if (l < 1) {
		l := std.strlen(this);
	}
	if ((at < l) && (at >= 0)) {
		return std.str_get_at(this,at);
	}
	return '\0';
}

method void set_at(in int at, in int v)
{
	var int l;
	l := size;
	if (l < 1) {
		l := std.strlen(this);
	}

	if ((at < l) && (at >= 0)) {
		std.str_set_at(this, at, v); // FIXME UTF-8
	}
	return;
}

} // class

