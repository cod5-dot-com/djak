/*
 *          MMXXIII December 11 PUBLIC DOMAIN by O'ksi'D
 *
 *        The authors disclaim copyright to this software.
 *
 * Anyone is free to copy, merge, modify, publish, use, compile, sell,
 * or distribute this software, either in source code form or as a
 * compiled binary, for any purpose, commercial or non-commercial, and
 * by any means.
 *
 * Anyone is free to create, communicate to the public, use, sell,
 * repair, modify, test, distribute or configure hardware in finished
 * or intermediate form, whether by manufacture, assembly, compiling,
 * processing, loading or applying this software or another hardware or
 * otherwise.
 *
 * THE SOFTWARE AND/OR HARDWARE ARE PROVIDED "AS IS", WITHOUT WARRANTY
 * OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT OF ANY PATENT, COPYRIGHT, TRADE SECRET OR OTHER
 * PROPRIETARY RIGHT.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE AND/OR HARDWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
 * AND/OR HARDWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 */

class Aexpr
{
field int op;
field int prec;
field int asso;
field Aexpr left;
field Aexpr right;
field Aexpr parent;
field string value2;
field int flags;
field Atoken origin;
field buffer data;

constructor Aexpr new(in int op1, in int precedence1, in int associativity1)
{
	op := op1;
	prec := precedence1;
	asso := associativity1;
	parent := null;
	left := null;
	right := null;
	value2 := null;
	flags := 0;
	origin := null;
	data := null;
	return this;
}

virtual void dispose()
{
	std.delayed_delete(this);
	return;
}

virtual void delayed_dispose()
{
	std.delete(left);
	std.delete(right);
	std.delete(value2);
	std.delete(data);
	std.free(this);
	return;
}

method void clear_data()
{
	std.delete(data);
	data := null;
	return;
}

method void add_data(in string value)
{
	if (value == null) {
		return;
	}
	if (value.length() < 1) {
		return;
	}
	if (data == null) {
		data := buffer.new(3, 0);
	}
	data.push(value);
	return;
}

method buffer get_data()
{
	return data;
}

method void merge_data(in buffer buf)
{
	var int l;
	l := 1;
	if (buf != null) {
		l := buf.length();
	}
	if (data == null) {
		data := buffer.new(l, 0);
	}
	if (buf == null) {
		return;
	}
	data.append(buf);
	return;
}

method string data_to_string(in string s)
{
	var int l;
	var int i;
	var int ol;
	if (data == null) {
		return s;
	}
	ol := s.length();
	l := data.length();
	i := 0;
	while (i < l) {
		ol := s.add_at(ol, data.get_at(i));
		i := i + 1;
	}
	return s;
}

method Atoken get_origin()
{
	return origin;
}

method void set_origin(in Atoken orig)
{
	origin := orig;
	return;
}

method Aexpr get_right()
{
	return right;
}

method void set_right(in Aexpr r)
{
	right := std.move(r);
	return;
}


method Aexpr get_left()
{
	return left;
}

method void set_left(in Aexpr l)
{
	left := std.move(l);
	return;
}

method Aexpr get_parent()
{
	return parent;
}

method void set_parent(in Aexpr p)
{
	parent := p;
	return;
}

method string get_value2()
{
	return value2;
}

method void set_value2(in string v)
{
	value2 := v;
	return;
}

method string get_value()
{
	if (data == null) {
		return null;
	}
	return data.get_at(0);
}

method void set_value(in string v)
{
	std.delete(data);
	data := buffer.new(1, 0);
	data.push(v);
	return;
}

method int get_op()
{
	return op;
}

method int get_flags()
{
	return flags;
}

method void set_flags(in int flags_)
{
	flags := flags_;
	return;
}

method void set_precedence(in int p)
{
	prec := p;
	return;
}

method void get_precedence()
{
	return prec;
}

method void get_associativity()
{
	return asso;
}


method Aexpr close(in int op_)
{

	var Aexpr cur;
	cur := this;
	while (cur != null) {
		if (cur.get_op() == op_) {
			return cur;
		}
		cur := cur.get_parent();
	}
	return null;
}

method Aexpr add(in Aexpr ex)
{
	var int pre;
	var int ass;
	var Aexpr cur;
	var Aexpr ri;
	var Aexpr le;
	var Aexpr par;
	var Aexpr child;
	var int p;
	pre := ex.get_precedence();
	ass := ex.get_associativity();
	cur := this;
	par := cur.get_parent();
	child := null;
	while (par != null) {
		p := cur.get_precedence();
		if (p > pre) {
			child := cur;
			cur := par;
			par := cur.get_parent();
		} else {
			if ((p == pre) && (ass == Aclass.$Clr)) {
				child := cur;
				cur := par;
				par := cur.get_parent();
			} else {
				par := null;
			}
		}
	}
	ex.set_parent(cur);
	ri := cur.get_right();
	if (ri == child) {
		if (ri != null) {
			ex.set_left(ri);
			ri.set_parent(ex);
		}
		cur.set_right(ex);
	} else {
		le := cur.get_left();
		if (le != null) {
			ex.set_left(le);
			le.set_parent(ex);
		}
		cur.set_left(ex);
	}
	return ex;
}

method void dump(in int depth)
{
	var int i;
	if (left != null) {
		left.dump(depth + 1);
	}
	i := depth;
	while (i > 0) {
		i := i - 1;
		console.log_str(" ");
	}

	console.log_str(get_value());
	console.log_str(" ");
	console.log_int(op);
	console.log("");
	if (right != null) {
		right.dump(depth + 1);
	}
	return;
}

method Aexpr is_equal_comp1(in string v)
{
	var int l;
	var int r;

	if (op == Aclass.$Cequal) {
		l := left.get_op();
		r := right.get_op();
		if (l == Aclass.$Cvar) {
			if (r == Aclass.$Cint_const || r == Aclass.$Cconstant) {
				if (v == null || v == left.get_value()) {
					return left;
				}
			}
		} else if (r == Aclass.$Cvar) {
			if (l == Aclass.$Cint_const || l == Aclass.$Cconstant) {
				if (v == null || v == right.get_value()) {
					return right;
				}
			}
		}
		return null;
	}
	return null;
}


method Aexpr get_case_expr1()
{
	var int l;
	var int r;
	var Aexpr o;

	o := null;
	if (op == Aclass.$Cequal) {
		l := left.get_op();
		r := right.get_op();
		if (l == Aclass.$Cvar) {
			o := right;
		} else if (r == Aclass.$Cvar) {
			o := left;
		}
		return o;
	}
	return null;
}

method Aexpr get_switch_expr()
{
	return right.is_equal_comp1(null);
}

method Aexpr get_case_expr(in int pos)
{
	var int opi;
	var int n;
	var Aexpr o;
	var buffer stack;

	if (right.get_op() == Aclass.$Cequal) {
		if (pos == 0) {
			return right.get_case_expr1();
		}
		return null;
	}
	stack := buffer.new(5,0);
	stack.push(right);
	n := 0;
	while (stack.length() > 0) {
		o := stack.pop();
		opi := 0;
		if (o != null) {
			opi := o.get_op();
		}
		if (opi == Aclass.$Clogicalor) {
			stack.push(o.get_right());
			stack.push(o.get_left());
		} else if (opi == Aclass.$Cequal) {
			o := o.get_case_expr1();
			if (o != null && n == pos) {
				std.delete(stack);
				return o;
			}
			n := n + 1;
		}
	}
	std.delete(stack);
	return null;
}

method string is_equal_comp(in string v)
{
	var Aexpr ret;
	var int opi;
	var Aexpr o;
	var buffer stack;

	ret := null;
	if (right != null && op == Aclass.$Croot) {
		if (right.get_op() == Aclass.$Clogicalor) {
			stack := buffer.new(5,0);
			stack.push(right.get_right());
			stack.push(right.get_left());
			while (stack.length() > 0) {
				o := stack.pop();
				opi := 0;
				if (o != null) {
					opi := o.get_op();
				}
				if (opi == Aclass.$Clogicalor) {
					stack.push(o.get_right());
					stack.push(o.get_left());
				} else if (opi == Aclass.$Cequal) {
					ret := o.is_equal_comp1(v);
					if (ret == null) {
						std.delete(stack);
						return null;
					}
				} else {
					std.delete(stack);
					return null;
				}
			}
			std.delete(stack);
		} else {
			ret := right.is_equal_comp1(v);
		}
	}
	if (ret == null) {
		return null;
	}
	return ret.get_value();
}

} // class

